# -*- coding: utf-8 -*-
"""ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-5Oqk47iUQlulc892_s27ZCKxybzUKfT
"""

from google.colab import files
train_data = files.upload()
test_data = files.upload()

import pandas as pd 
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import io
train = pd.read_csv(io.BytesIO(train_data['train.csv']))
test = pd.read_csv(io.BytesIO(test_data['test.csv']))

train.head()

sns.heatmap(train.isnull(),yticklabels=False,cbar = False, cmap='viridis')

sns.set_style('whitegrid')

train.head()

train['Age'].plot.hist(bins=36)

train.info()

import cufflinks as cf

cf.go_offline()

train['Fare'].hist(bins=40,figsize=(10,4))

cf.go_offline()

#Fill the empty ages with the mean value

def impute_age(col):
    Age = col[0]
    Pclass = col[1]

    if pd.isnull(Age):
      if Pclass == 1:
        return 37
      if Pclass == 2:
        return 29
      if Pclass == 3:
        return 24
    else:
      return Age

# Visualize the data: sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')

#data cleaning with my impute_age function 
train['Age'] = train[['Age','Pclass']].apply(impute_age,axis=1)
train.drop('Cabin',axis=1,inplace=True)
train.dropna(inplace=True)
sex = pd.get_dummies(train['Sex'],drop_first=True)
embark = pd.get_dummies(train['Embarked'],drop_first=True)
train = pd.concat([train,sex,embark],axis=1)
train.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace =True)

#training 
X = train.drop(['Survived'],axis=1)
y= train['S
urvived']#the column we want to predict

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression(max_iter=1000)
logmodel.fit(X_train,y_train)
predictions = logmodel.predict(X_test)

from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

#print the result
print(classification_report(y_test,predictions))
confusion_matrix(y_test,predictions)

