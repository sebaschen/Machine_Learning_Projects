# -*- coding: utf-8 -*-
"""02-Logistic Regression Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JANVZ9F67iIp4KS7Z-9GAKj8_3XkC5JE

___

<a href='http://www.pieriandata.com'> <img src='../Pierian_Data_Logo.png' /></a>
___
# Logistic Regression Project 

In this project we will be working with a fake advertising data set, indicating whether or not a particular internet user clicked on an Advertisement. We will try to create a model that will predict whether or not they will click on an ad based off the features of that user.

This data set contains the following features:

* 'Daily Time Spent on Site': consumer time on site in minutes
* 'Age': cutomer age in years
* 'Area Income': Avg. Income of geographical area of consumer
* 'Daily Internet Usage': Avg. minutes a day consumer is on the internet
* 'Ad Topic Line': Headline of the advertisement
* 'City': City of consumer
* 'Male': Whether or not consumer was male
* 'Country': Country of consumer
* 'Timestamp': Time at which consumer clicked on Ad or closed window
* 'Clicked on Ad': 0 or 1 indicated clicking on Ad

## Import Libraries

**Import a few libraries you think you'll need (Or just import them as you go along!)**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import numpy as np
import io
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""## Get the Data
**Read in the advertising.csv file and set it to a data frame called ad_data.**
"""

from google.colab import files
train_data = files.upload()

ad_data = pd.read_csv(io.BytesIO(train_data['advertising.csv']))

"""**Check the head of ad_data**"""

ad_data.head()

"""** Use info and describe() on ad_data**"""

ad_data.info()

ad_data.describe()

"""## Exploratory Data Analysis

Let's use seaborn to explore the data!

Try recreating the plots shown below!

** Create a histogram of the Age**
"""

sns.distplot(ad_data['Age'],kde=False,bins=30,hist_kws={"alpha":0.75})
# ad_data['Age'].plot.hist(bins=36)

"""**Create a jointplot showing Area Income versus Age.**

> 縮排段落
"""

sns.set_style('whitegrid')
sns.jointplot(x="Age",y="Area Income",data=ad_data)

ad_data.columns.values

"""**Create a jointplot showing the kde distributions of Daily Time spent on site vs. Age.**"""

sns.jointplot(x="Age", y="Daily Time Spent on Site", data=ad_data, kind="kde");

"""** Create a jointplot of 'Daily Time Spent on Site' vs. 'Daily Internet Usage'**"""

sns.jointplot(x="Daily Time Spent on Site",y="Daily Internet Usage",data=ad_data)

"""** Finally, create a pairplot with the hue defined by the 'Clicked on Ad' column feature.**"""

sns.pairplot(ad_data,hue="Clicked on Ad")

"""# Logistic Regression

Now it's time to do a train test split, and train our model!

You'll have the freedom here to choose columns that you want to train on!

** Split the data into training set and testing set using train_test_split**
"""

from sklearn.model_selection import train_test_split
X = ad_data[["Daily Time Spent on Site", 'Age', 'Area Income','Daily Internet Usage', 'Male']]

X_train, X_test, Y_train, Y_test = train_test_split(X,ad_data["Clicked on Ad"],test_size=0.30,random_state=0)

test_data

"""** Train and fit a logistic regression model on the training set.**"""

from sklearn.linear_model import LogisticRegression
logmodel = LogisticRegression(max_iter=1000)
logmodel.fit(X_train,Y_train)

from sklearn.metrics import classification_report

predictions = logmodel.predict(X_test)
print(classification_report(Y_test,predictions))

"""## Predictions and Evaluations
** Now predict values for the testing data.**
"""

from sklearn.metrics import classification_report

predictions = logmodel.predict(X_test)
print(classification_report(Y_test,predictions))

"""** Create a classification report for the model.**"""





"""## Great Job!"""